---
import { Image } from 'astro:assets';
import corgi from '../assets/corgi.jpg';
import Diff from '../components/Diff.astro';
import Markdown from '../components/Markdown.astro';
import Layout from '../layouts/Layout.astro';

const sampleImage = '/images/corgi.jpg';

const forceWebP = process.env.NODE_ENV = "development";
const sampleImageSrcSet = [640, 1280, 2048]
    .map((size) => {
        return `/.netlify/images?url=${sampleImage}&w=${size}${forceWebP ? '&fm=webp' : ''} ${size}w`;
    })
    .join(', ');
const sizes = '(max-width: 1024px) 100vw, 1024px';

const astroImageSnippet = `
## Using the built-in Astro &lt;Image /&gt; component

Astro's \`Image\` component will automatically use Netlify Image CDN to serve optimized images.

~~~jsx
---
import { Image } from 'astro:assets';
import corgi from '../assets/corgi.jpg';
---
// Later in your markup...
<Image src={corgi} alt="Corgi" /* ... additional props */ />
~~~
`;

const originalVsCdnSnippet = `
## Original vs. optimized image: can you tell the difference?

In the code below, a regular \`<img>\` tag is used in both cases for a framework-agnostic example. 
Note that aside from Astro's \`Image\` or rolling your own \`<img>\` tags, you can also use the excellent [unpic-img](https://unpic.pics/) package.

~~~jsx
// <== On the left, the original image
<img src="/images/corgi.jpg" alt="Corgi" />

// ==> On the right, explicitly using Netlify Image CDN endpoint for a responsive image
<img 
  srcSet="${sampleImageSrcSet}"
  sizes="${sizes}" 
  alt="Corgi" 
/>
~~~
`;

const devModeWarning = `
In local development, optimization is performed locally without automatic format
detection, so format is set to WebP.
`;
---

<Layout title="Image CDN">
    <div class="flex flex-col gap-12 sm:gap-16">
        <section>
            <h1>Image CDN</h1>
        </section>
        <section>
            <Markdown content={astroImageSnippet} class="mb-8" />
            <figure>
                <Image src={corgi} alt="Corgi" class="border-2 border-white rounded-lg" />
                <figcaption class="mt-2 text-sm italic">
                    Credit: photo by <a href="https://unsplash.com/@alvannee">Alvan Nee</a> on
                    <a href="https://unsplash.com/photos/long-coated-white-and-brown-dog-lvFlpqEvuRM"> Unsplash </a>
                </figcaption>
            </figure>
        </section>
        <section>
            <Markdown content={originalVsCdnSnippet} class="mb-8" />
            <Diff class="border-2 border-white rounded-lg image-diff aspect-3/2">
                <Fragment slot="item-1">
                    <div>
                        <div class="relative">
                            <span class="hidden absolute py-1.5 px-2.5 text-sm rounded-md bg-gray-900/70 top-2.5 left-2.5"></span>
                            <img src={sampleImage} alt="Corgi" />
                        </div>
                    </div>
                </Fragment>
                <Fragment slot="item-2">
                    <div>
                        <div class="relative">
                            <span class="hidden absolute py-1.5 px-2.5 text-sm rounded-md bg-gray-900/70 top-2.5 right-2.5"></span>

                            <img srcset={sampleImageSrcSet} alt="Corgi" />
                        </div>
                    </div>
                </Fragment>
            </Diff>
        </section>
    </div>
</Layout>

<script>
    const images = document.querySelectorAll<HTMLImageElement>('.image-diff img');

    images.forEach((image) => {
        if (image.complete) {
            showImageSize(image);
        } else {
            image.addEventListener('load', () => {
                showImageSize(image);
            });
        }
    });

    function showImageSize(image: HTMLImageElement) {
        const imageEntry = window?.performance?.getEntriesByName(image.currentSrc)?.[0] as PerformanceResourceTiming;
        if (imageEntry && imageEntry.encodedBodySize) {
            const imageOverlay = image.previousElementSibling;
            imageOverlay.classList.remove('hidden');
            imageOverlay.textContent = `Size: ${Math.ceil(imageEntry.encodedBodySize / 1024)}KB`;
        }
    }
</script>
